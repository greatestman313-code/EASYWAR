
From 9abcde0001 Mon Sep 17 00:00:00 2001
From: EasyWar Bot <bot@easywar.local>
Date: Sat, 30 Aug 2025 15:20:00 +0300
Subject: chore: unify Next config, add OpenAI/Supabase deps, and fix SSR client

diff --git a/next.config.ts b/next.config.ts
deleted file mode 100644
index 1111111..0000000
--- a/next.config.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-// (Removed: Vercel doesn't support next.config.ts, use .mjs)
-
diff --git a/next.config.mjs b/next.config.mjs
new file mode 100644
index 0000000..2222222
--- /dev/null
+++ b/next.config.mjs
@@ -0,0 +1,13 @@
+/** @type {import('next').NextConfig} */
+const nextConfig = {
+  reactStrictMode: true,
+  images: {
+    remotePatterns: [{ protocol: "https", hostname: "**" }]
+  }
+};
+
+export default nextConfig;
+
diff --git a/package.json b/package.json
index 3333333..4444444 100644
--- a/package.json
+++ b/package.json
@@ -1,30 +1,38 @@
 {
   "name": "easywar-ultra-v4",
   "private": true,
   "version": "1.0.0",
   "scripts": {
-    "build": "next build",
+    "build": "next build",
     "dev": "next dev",
     "start": "next start",
-    "lint": "next lint"
+    "lint": "next lint",
+    "vercel-build": "next build"
   },
-  "dependencies": {
-    "next": "14.2.4",
-    "react": "18.2.0",
-    "react-dom": "18.2.0"
-  },
+  "dependencies": {
+    "next": "14.2.7",
+    "react": "18.3.1",
+    "react-dom": "18.3.1",
+    "@supabase/supabase-js": "^2.45.4",
+    "@supabase/ssr": "^0.5.0",
+    "openai": "^4.57.0"
+  },
   "devDependencies": {
-    "typescript": "^5.6.3",
-    "@types/react": "^18.3.3",
-    "@types/node": "^22.6.1"
+    "typescript": "^5.6.3",
+    "@types/react": "^18.3.5",
+    "@types/node": "^22.7.4"
   },
   "engines": {
-    "node": ">=18.17.0"
+    "node": ">=18.17.0 <19"
   }
 }

diff --git a/lib/openai.ts b/lib/openai.ts
new file mode 100644
index 0000000..5555555
--- /dev/null
+++ b/lib/openai.ts
@@ -0,0 +1,12 @@
+import OpenAI from "openai";
+
+if (!process.env.OPENAI_API_KEY) {
+  console.warn("[openai] OPENAI_API_KEY is missing.");
+}
+
+export const openai = new OpenAI({
+  apiKey: process.env.OPENAI_API_KEY
+});
+
diff --git a/lib/supabase/server.ts b/lib/supabase/server.ts
new file mode 100644
index 0000000..6666666
--- /dev/null
+++ b/lib/supabase/server.ts
@@ -0,0 +1,33 @@
+import { cookies } from "next/headers";
+import { createServerClient } from "@supabase/ssr";
+import type { CookieOptions } from "@supabase/ssr";
+
+export function createSupabaseServer() {
+  const cookieStore = cookies();
+
+  const client = createServerClient(
+    process.env.NEXT_PUBLIC_SUPABASE_URL!,
+    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
+    {
+      cookies: {
+        get(name: string) {
+          return cookieStore.get(name)?.value;
+        },
+        set(name: string, value: string, options: CookieOptions) {
+          cookieStore.set({ name, value, ...options });
+        },
+        remove(name: string, options: CookieOptions) {
+          cookieStore.set({ name, value: "", ...options });
+        }
+      }
+    } as any
+  );
+
+  return client;
+}
+
diff --git a/app/api/ai/rate-post/route.ts b/app/api/ai/rate-post/route.ts
new file mode 100644
index 0000000..7777777
--- /dev/null
+++ b/app/api/ai/rate-post/route.ts
@@ -0,0 +1,62 @@
+import { NextResponse } from "next/server";
+import { openai } from "@/lib/openai";
+
+export const runtime = "nodejs";
+export const dynamic = "force-dynamic";
+
+type RequestBody = {
+  caption?: string;
+  imageUrl?: string;
+  locale?: "ar" | "en";
+};
+
+export async function POST(req: Request) {
+  try {
+    const { caption = "", imageUrl = "", locale = "ar" } = (await req.json()) as RequestBody;
+
+    const sys = locale === "ar"
+      ? `أنت خبير تسويق. قيّم بوست انستغرام بناءً على النص والصورة (إن وجدت).
+أعد JSON فقط بهذه البنية: 
+{ "score": number (0-10), "positives": string[], "negatives": string[], "is_ad": boolean, "notes": string }`
+      : `You are a marketing expert. Evaluate an Instagram-style post given text and optional image.
+Return ONLY valid JSON:
+{ "score": number (0-10), "positives": string[], "negatives": string[], "is_ad": boolean, "notes": string }`;
+
+    const userParts = [
+      caption ? `Caption:\n${caption}` : "",
+      imageUrl ? `Image URL:\n${imageUrl}` : ""
+    ].filter(Boolean).join("\n\n");
+
+    const resp = await openai.chat.completions.create({
+      model: "gpt-4o-mini",
+      temperature: 0.3,
+      messages: [
+        { role: "system", content: sys },
+        { role: "user", content: userParts || "No content provided." }
+      ]
+    });
+
+    const text = resp.choices[0]?.message?.content?.trim() || "{}";
+
+    try {
+      const parsed = JSON.parse(text);
+      return NextResponse.json(parsed);
+    } catch {
+      return NextResponse.json({ raw: text }, { status: 200 });
+    }
+  } catch (err: any) {
+    console.error("rate-post error:", err);
+    return NextResponse.json({ error: err?.message || "Unknown error" }, { status: 500 });
+  }
+}
+
diff --git a/app/api/db/profile/route.ts b/app/api/db/profile/route.ts
new file mode 100644
index 0000000..8888888
--- /dev/null
+++ b/app/api/db/profile/route.ts
@@ -0,0 +1,28 @@
+import { NextResponse } from "next/server";
+import { createSupabaseServer } from "@/lib/supabase/server";
+
+export const runtime = "nodejs";
+export const dynamic = "force-dynamic";
+
+export async function GET() {
+  try {
+    const supabase = createSupabaseServer();
+    const { data, error } = await supabase
+      .from("profiles")
+      .select("*")
+      .limit(1)
+      .maybeSingle();
+
+    if (error) {
+      return NextResponse.json({ error: error.message }, { status: 400 });
+    }
+    return NextResponse.json({ profile: data ?? null });
+  } catch (err: any) {
+    return NextResponse.json({ error: err?.message || "Unknown error" }, { status: 500 });
+  }
+}
+
